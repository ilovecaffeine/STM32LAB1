
Lab1_Ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ae8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001bf4  08001bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c18  08001c18  00003014  2**0
                  CONTENTS
  4 .ARM          00000000  08001c18  08001c18  00003014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c18  08001c18  00003014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c18  08001c18  00002c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c1c  08001c1c  00002c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08001c20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000014  08001c34  00003014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001c34  00003034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a20  00000000  00000000  0000303d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e9f  00000000  00000000  00005a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003e8  00000000  00000000  00006900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ce  00000000  00000000  00006ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015677  00000000  00000000  00006fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000050fc  00000000  00000000  0001c62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079d52  00000000  00000000  00021729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009b47b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000da4  00000000  00000000  0009b4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0009c264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000014 	.word	0x20000014
 8000128:	00000000 	.word	0x00000000
 800012c:	08001bdc 	.word	0x08001bdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000018 	.word	0x20000018
 8000148:	08001bdc 	.word	0x08001bdc

0800014c <display7SEG.0>:
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  void display7SEG(int num) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	f8c7 c000 	str.w	ip, [r7]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	2b00      	cmp	r3, #0
 800015c:	f2c0 819c 	blt.w	8000498 <display7SEG.0+0x34c>
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2b09      	cmp	r3, #9
 8000164:	f300 8198 	bgt.w	8000498 <display7SEG.0+0x34c>
    switch (num) {
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b09      	cmp	r3, #9
 800016c:	f200 8196 	bhi.w	800049c <display7SEG.0+0x350>
 8000170:	a201      	add	r2, pc, #4	@ (adr r2, 8000178 <display7SEG.0+0x2c>)
 8000172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000176:	bf00      	nop
 8000178:	080001a1 	.word	0x080001a1
 800017c:	080001ed 	.word	0x080001ed
 8000180:	08000239 	.word	0x08000239
 8000184:	08000285 	.word	0x08000285
 8000188:	080002d1 	.word	0x080002d1
 800018c:	0800031d 	.word	0x0800031d
 8000190:	08000369 	.word	0x08000369
 8000194:	080003b5 	.word	0x080003b5
 8000198:	08000401 	.word	0x08000401
 800019c:	0800044d 	.word	0x0800044d
        case 0:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2101      	movs	r1, #1
 80001a4:	48bf      	ldr	r0, [pc, #764]	@ (80004a4 <display7SEG.0+0x358>)
 80001a6:	f001 f8f7 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2102      	movs	r1, #2
 80001ae:	48bd      	ldr	r0, [pc, #756]	@ (80004a4 <display7SEG.0+0x358>)
 80001b0:	f001 f8f2 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2104      	movs	r1, #4
 80001b8:	48ba      	ldr	r0, [pc, #744]	@ (80004a4 <display7SEG.0+0x358>)
 80001ba:	f001 f8ed 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2108      	movs	r1, #8
 80001c2:	48b8      	ldr	r0, [pc, #736]	@ (80004a4 <display7SEG.0+0x358>)
 80001c4:	f001 f8e8 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	2110      	movs	r1, #16
 80001cc:	48b5      	ldr	r0, [pc, #724]	@ (80004a4 <display7SEG.0+0x358>)
 80001ce:	f001 f8e3 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_RESET);
 80001d2:	2200      	movs	r2, #0
 80001d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001d8:	48b2      	ldr	r0, [pc, #712]	@ (80004a4 <display7SEG.0+0x358>)
 80001da:	f001 f8dd 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_SET);
 80001de:	2201      	movs	r2, #1
 80001e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e4:	48af      	ldr	r0, [pc, #700]	@ (80004a4 <display7SEG.0+0x358>)
 80001e6:	f001 f8d7 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80001ea:	e158      	b.n	800049e <display7SEG.0+0x352>
        case 1:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_SET);
 80001ec:	2201      	movs	r2, #1
 80001ee:	2101      	movs	r1, #1
 80001f0:	48ac      	ldr	r0, [pc, #688]	@ (80004a4 <display7SEG.0+0x358>)
 80001f2:	f001 f8d1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 80001f6:	2200      	movs	r2, #0
 80001f8:	2102      	movs	r1, #2
 80001fa:	48aa      	ldr	r0, [pc, #680]	@ (80004a4 <display7SEG.0+0x358>)
 80001fc:	f001 f8cc 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	2104      	movs	r1, #4
 8000204:	48a7      	ldr	r0, [pc, #668]	@ (80004a4 <display7SEG.0+0x358>)
 8000206:	f001 f8c7 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_SET);
 800020a:	2201      	movs	r2, #1
 800020c:	2108      	movs	r1, #8
 800020e:	48a5      	ldr	r0, [pc, #660]	@ (80004a4 <display7SEG.0+0x358>)
 8000210:	f001 f8c2 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_SET);
 8000214:	2201      	movs	r2, #1
 8000216:	2110      	movs	r1, #16
 8000218:	48a2      	ldr	r0, [pc, #648]	@ (80004a4 <display7SEG.0+0x358>)
 800021a:	f001 f8bd 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000224:	489f      	ldr	r0, [pc, #636]	@ (80004a4 <display7SEG.0+0x358>)
 8000226:	f001 f8b7 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000230:	489c      	ldr	r0, [pc, #624]	@ (80004a4 <display7SEG.0+0x358>)
 8000232:	f001 f8b1 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 8000236:	e132      	b.n	800049e <display7SEG.0+0x352>
        case 2:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	2101      	movs	r1, #1
 800023c:	4899      	ldr	r0, [pc, #612]	@ (80004a4 <display7SEG.0+0x358>)
 800023e:	f001 f8ab 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 8000242:	2200      	movs	r2, #0
 8000244:	2102      	movs	r1, #2
 8000246:	4897      	ldr	r0, [pc, #604]	@ (80004a4 <display7SEG.0+0x358>)
 8000248:	f001 f8a6 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_SET);
 800024c:	2201      	movs	r2, #1
 800024e:	2104      	movs	r1, #4
 8000250:	4894      	ldr	r0, [pc, #592]	@ (80004a4 <display7SEG.0+0x358>)
 8000252:	f001 f8a1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2108      	movs	r1, #8
 800025a:	4892      	ldr	r0, [pc, #584]	@ (80004a4 <display7SEG.0+0x358>)
 800025c:	f001 f89c 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2110      	movs	r1, #16
 8000264:	488f      	ldr	r0, [pc, #572]	@ (80004a4 <display7SEG.0+0x358>)
 8000266:	f001 f897 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_SET);
 800026a:	2201      	movs	r2, #1
 800026c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000270:	488c      	ldr	r0, [pc, #560]	@ (80004a4 <display7SEG.0+0x358>)
 8000272:	f001 f891 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 8000276:	2200      	movs	r2, #0
 8000278:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800027c:	4889      	ldr	r0, [pc, #548]	@ (80004a4 <display7SEG.0+0x358>)
 800027e:	f001 f88b 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 8000282:	e10c      	b.n	800049e <display7SEG.0+0x352>
        case 3:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	2101      	movs	r1, #1
 8000288:	4886      	ldr	r0, [pc, #536]	@ (80004a4 <display7SEG.0+0x358>)
 800028a:	f001 f885 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	2102      	movs	r1, #2
 8000292:	4884      	ldr	r0, [pc, #528]	@ (80004a4 <display7SEG.0+0x358>)
 8000294:	f001 f880 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2104      	movs	r1, #4
 800029c:	4881      	ldr	r0, [pc, #516]	@ (80004a4 <display7SEG.0+0x358>)
 800029e:	f001 f87b 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	2108      	movs	r1, #8
 80002a6:	487f      	ldr	r0, [pc, #508]	@ (80004a4 <display7SEG.0+0x358>)
 80002a8:	f001 f876 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2110      	movs	r1, #16
 80002b0:	487c      	ldr	r0, [pc, #496]	@ (80004a4 <display7SEG.0+0x358>)
 80002b2:	f001 f871 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_SET);
 80002b6:	2201      	movs	r2, #1
 80002b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80002bc:	4879      	ldr	r0, [pc, #484]	@ (80004a4 <display7SEG.0+0x358>)
 80002be:	f001 f86b 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002c8:	4876      	ldr	r0, [pc, #472]	@ (80004a4 <display7SEG.0+0x358>)
 80002ca:	f001 f865 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80002ce:	e0e6      	b.n	800049e <display7SEG.0+0x352>
        case 4:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_SET);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2101      	movs	r1, #1
 80002d4:	4873      	ldr	r0, [pc, #460]	@ (80004a4 <display7SEG.0+0x358>)
 80002d6:	f001 f85f 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2102      	movs	r1, #2
 80002de:	4871      	ldr	r0, [pc, #452]	@ (80004a4 <display7SEG.0+0x358>)
 80002e0:	f001 f85a 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2104      	movs	r1, #4
 80002e8:	486e      	ldr	r0, [pc, #440]	@ (80004a4 <display7SEG.0+0x358>)
 80002ea:	f001 f855 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2108      	movs	r1, #8
 80002f2:	486c      	ldr	r0, [pc, #432]	@ (80004a4 <display7SEG.0+0x358>)
 80002f4:	f001 f850 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2110      	movs	r1, #16
 80002fc:	4869      	ldr	r0, [pc, #420]	@ (80004a4 <display7SEG.0+0x358>)
 80002fe:	f001 f84b 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000308:	4866      	ldr	r0, [pc, #408]	@ (80004a4 <display7SEG.0+0x358>)
 800030a:	f001 f845 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000314:	4863      	ldr	r0, [pc, #396]	@ (80004a4 <display7SEG.0+0x358>)
 8000316:	f001 f83f 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800031a:	e0c0      	b.n	800049e <display7SEG.0+0x352>
        case 5:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	2101      	movs	r1, #1
 8000320:	4860      	ldr	r0, [pc, #384]	@ (80004a4 <display7SEG.0+0x358>)
 8000322:	f001 f839 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2102      	movs	r1, #2
 800032a:	485e      	ldr	r0, [pc, #376]	@ (80004a4 <display7SEG.0+0x358>)
 800032c:	f001 f834 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2104      	movs	r1, #4
 8000334:	485b      	ldr	r0, [pc, #364]	@ (80004a4 <display7SEG.0+0x358>)
 8000336:	f001 f82f 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2108      	movs	r1, #8
 800033e:	4859      	ldr	r0, [pc, #356]	@ (80004a4 <display7SEG.0+0x358>)
 8000340:	f001 f82a 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2110      	movs	r1, #16
 8000348:	4856      	ldr	r0, [pc, #344]	@ (80004a4 <display7SEG.0+0x358>)
 800034a:	f001 f825 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000354:	4853      	ldr	r0, [pc, #332]	@ (80004a4 <display7SEG.0+0x358>)
 8000356:	f001 f81f 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000360:	4850      	ldr	r0, [pc, #320]	@ (80004a4 <display7SEG.0+0x358>)
 8000362:	f001 f819 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 8000366:	e09a      	b.n	800049e <display7SEG.0+0x352>
        case 6:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2101      	movs	r1, #1
 800036c:	484d      	ldr	r0, [pc, #308]	@ (80004a4 <display7SEG.0+0x358>)
 800036e:	f001 f813 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2102      	movs	r1, #2
 8000376:	484b      	ldr	r0, [pc, #300]	@ (80004a4 <display7SEG.0+0x358>)
 8000378:	f001 f80e 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 800037c:	2200      	movs	r2, #0
 800037e:	2104      	movs	r1, #4
 8000380:	4848      	ldr	r0, [pc, #288]	@ (80004a4 <display7SEG.0+0x358>)
 8000382:	f001 f809 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 8000386:	2200      	movs	r2, #0
 8000388:	2108      	movs	r1, #8
 800038a:	4846      	ldr	r0, [pc, #280]	@ (80004a4 <display7SEG.0+0x358>)
 800038c:	f001 f804 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	4843      	ldr	r0, [pc, #268]	@ (80004a4 <display7SEG.0+0x358>)
 8000396:	f000 ffff 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_RESET);
 800039a:	2200      	movs	r2, #0
 800039c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003a0:	4840      	ldr	r0, [pc, #256]	@ (80004a4 <display7SEG.0+0x358>)
 80003a2:	f000 fff9 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ac:	483d      	ldr	r0, [pc, #244]	@ (80004a4 <display7SEG.0+0x358>)
 80003ae:	f000 fff3 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80003b2:	e074      	b.n	800049e <display7SEG.0+0x352>
        case 7:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2101      	movs	r1, #1
 80003b8:	483a      	ldr	r0, [pc, #232]	@ (80004a4 <display7SEG.0+0x358>)
 80003ba:	f000 ffed 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2102      	movs	r1, #2
 80003c2:	4838      	ldr	r0, [pc, #224]	@ (80004a4 <display7SEG.0+0x358>)
 80003c4:	f000 ffe8 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2104      	movs	r1, #4
 80003cc:	4835      	ldr	r0, [pc, #212]	@ (80004a4 <display7SEG.0+0x358>)
 80003ce:	f000 ffe3 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2108      	movs	r1, #8
 80003d6:	4833      	ldr	r0, [pc, #204]	@ (80004a4 <display7SEG.0+0x358>)
 80003d8:	f000 ffde 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	4830      	ldr	r0, [pc, #192]	@ (80004a4 <display7SEG.0+0x358>)
 80003e2:	f000 ffd9 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003ec:	482d      	ldr	r0, [pc, #180]	@ (80004a4 <display7SEG.0+0x358>)
 80003ee:	f000 ffd3 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003f8:	482a      	ldr	r0, [pc, #168]	@ (80004a4 <display7SEG.0+0x358>)
 80003fa:	f000 ffcd 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80003fe:	e04e      	b.n	800049e <display7SEG.0+0x352>
        case 8:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	2101      	movs	r1, #1
 8000404:	4827      	ldr	r0, [pc, #156]	@ (80004a4 <display7SEG.0+0x358>)
 8000406:	f000 ffc7 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 800040a:	2200      	movs	r2, #0
 800040c:	2102      	movs	r1, #2
 800040e:	4825      	ldr	r0, [pc, #148]	@ (80004a4 <display7SEG.0+0x358>)
 8000410:	f000 ffc2 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2104      	movs	r1, #4
 8000418:	4822      	ldr	r0, [pc, #136]	@ (80004a4 <display7SEG.0+0x358>)
 800041a:	f000 ffbd 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2108      	movs	r1, #8
 8000422:	4820      	ldr	r0, [pc, #128]	@ (80004a4 <display7SEG.0+0x358>)
 8000424:	f000 ffb8 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2110      	movs	r1, #16
 800042c:	481d      	ldr	r0, [pc, #116]	@ (80004a4 <display7SEG.0+0x358>)
 800042e:	f000 ffb3 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000438:	481a      	ldr	r0, [pc, #104]	@ (80004a4 <display7SEG.0+0x358>)
 800043a:	f000 ffad 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000444:	4817      	ldr	r0, [pc, #92]	@ (80004a4 <display7SEG.0+0x358>)
 8000446:	f000 ffa7 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800044a:	e028      	b.n	800049e <display7SEG.0+0x352>
        case 9:
            HAL_GPIO_WritePin(GPIOA, SEG_0_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	2101      	movs	r1, #1
 8000450:	4814      	ldr	r0, [pc, #80]	@ (80004a4 <display7SEG.0+0x358>)
 8000452:	f000 ffa1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_1_Pin, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2102      	movs	r1, #2
 800045a:	4812      	ldr	r0, [pc, #72]	@ (80004a4 <display7SEG.0+0x358>)
 800045c:	f000 ff9c 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_2_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2104      	movs	r1, #4
 8000464:	480f      	ldr	r0, [pc, #60]	@ (80004a4 <display7SEG.0+0x358>)
 8000466:	f000 ff97 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_3_Pin, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2108      	movs	r1, #8
 800046e:	480d      	ldr	r0, [pc, #52]	@ (80004a4 <display7SEG.0+0x358>)
 8000470:	f000 ff92 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_4_Pin, GPIO_PIN_SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2110      	movs	r1, #16
 8000478:	480a      	ldr	r0, [pc, #40]	@ (80004a4 <display7SEG.0+0x358>)
 800047a:	f000 ff8d 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_5_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000484:	4807      	ldr	r0, [pc, #28]	@ (80004a4 <display7SEG.0+0x358>)
 8000486:	f000 ff87 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOA, SEG_6_Pin, GPIO_PIN_RESET);
 800048a:	2200      	movs	r2, #0
 800048c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000490:	4804      	ldr	r0, [pc, #16]	@ (80004a4 <display7SEG.0+0x358>)
 8000492:	f000 ff81 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 8000496:	e002      	b.n	800049e <display7SEG.0+0x352>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000498:	bf00      	nop
 800049a:	e000      	b.n	800049e <display7SEG.0+0x352>
        default:
            // Handle invalid input
            break;
 800049c:	bf00      	nop
    }
  }
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40010800 	.word	0x40010800

080004a8 <main>:
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
int main(void)
 80004ae:	f107 0318 	add.w	r3, r7, #24
 80004b2:	603b      	str	r3, [r7, #0]
  HAL_Init();
 80004b4:	f000 fc8a 	bl	8000dcc <HAL_Init>
  SystemClock_Config();
 80004b8:	f000 fb5a 	bl	8000b70 <SystemClock_Config>
  MX_GPIO_Init();
 80004bc:	f000 fb94 	bl	8000be8 <MX_GPIO_Init>
    STATE_WAY2_GREEN,
    STATE_WAY2_YELLOW,
    STATE_WAY2_RED
} TrafficLightState;

TrafficLightState state = STATE_WAY1_GREEN;
 80004c0:	2300      	movs	r3, #0
 80004c2:	73fb      	strb	r3, [r7, #15]
TrafficLightState state2 = STATE_WAY2_RED;
 80004c4:	2305      	movs	r3, #5
 80004c6:	73bb      	strb	r3, [r7, #14]
int count=1;
 80004c8:	2301      	movs	r3, #1
 80004ca:	60bb      	str	r3, [r7, #8]
int count2=1;
 80004cc:	2301      	movs	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
  while (1)
  {



      switch (state) {
 80004d0:	7bfb      	ldrb	r3, [r7, #15]
 80004d2:	2b02      	cmp	r3, #2
 80004d4:	d048      	beq.n	8000568 <main+0xc0>
 80004d6:	2b02      	cmp	r3, #2
 80004d8:	dc6c      	bgt.n	80005b4 <main+0x10c>
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d002      	beq.n	80004e4 <main+0x3c>
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d021      	beq.n	8000526 <main+0x7e>
 80004e2:	e067      	b.n	80005b4 <main+0x10c>
        case STATE_WAY1_GREEN:
            // Way 1: GREEN
            set_light_state(0, 2); // Way 1 GREEN
 80004e4:	463b      	mov	r3, r7
 80004e6:	469c      	mov	ip, r3
 80004e8:	2102      	movs	r1, #2
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 faa6 	bl	8000a3c <set_light_state.1>

            if (num1 < 1) {
 80004f0:	4b6f      	ldr	r3, [pc, #444]	@ (80006b0 <main+0x208>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dc02      	bgt.n	80004fe <main+0x56>
                num1 = 3; // Reset to 3 after reaching 1
 80004f8:	4b6d      	ldr	r3, [pc, #436]	@ (80006b0 <main+0x208>)
 80004fa:	2203      	movs	r2, #3
 80004fc:	601a      	str	r2, [r3, #0]
            }

            display7SEG(num1);
 80004fe:	4b6c      	ldr	r3, [pc, #432]	@ (80006b0 <main+0x208>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	463a      	mov	r2, r7
 8000504:	4694      	mov	ip, r2
 8000506:	4618      	mov	r0, r3
 8000508:	f7ff fe20 	bl	800014c <display7SEG.0>
            num1--;
 800050c:	4b68      	ldr	r3, [pc, #416]	@ (80006b0 <main+0x208>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3b01      	subs	r3, #1
 8000512:	4a67      	ldr	r2, [pc, #412]	@ (80006b0 <main+0x208>)
 8000514:	6013      	str	r3, [r2, #0]

            if (count == 3) {
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	2b03      	cmp	r3, #3
 800051a:	d146      	bne.n	80005aa <main+0x102>
                state = STATE_WAY1_YELLOW;
 800051c:	2301      	movs	r3, #1
 800051e:	73fb      	strb	r3, [r7, #15]
                count = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
            }
            break;
 8000524:	e041      	b.n	80005aa <main+0x102>

        case STATE_WAY1_YELLOW:
            // Way 1: YELLOW
            set_light_state(0, 1); // Way 1 YELLOW
 8000526:	463b      	mov	r3, r7
 8000528:	469c      	mov	ip, r3
 800052a:	2101      	movs	r1, #1
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fa85 	bl	8000a3c <set_light_state.1>

            if (num1 < 1) {
 8000532:	4b5f      	ldr	r3, [pc, #380]	@ (80006b0 <main+0x208>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b00      	cmp	r3, #0
 8000538:	dc02      	bgt.n	8000540 <main+0x98>
                num1 = 2; // Reset to 2 after reaching 1
 800053a:	4b5d      	ldr	r3, [pc, #372]	@ (80006b0 <main+0x208>)
 800053c:	2202      	movs	r2, #2
 800053e:	601a      	str	r2, [r3, #0]
            }

            display7SEG(num1);
 8000540:	4b5b      	ldr	r3, [pc, #364]	@ (80006b0 <main+0x208>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	463a      	mov	r2, r7
 8000546:	4694      	mov	ip, r2
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fdff 	bl	800014c <display7SEG.0>
            num1--;
 800054e:	4b58      	ldr	r3, [pc, #352]	@ (80006b0 <main+0x208>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a56      	ldr	r2, [pc, #344]	@ (80006b0 <main+0x208>)
 8000556:	6013      	str	r3, [r2, #0]

            if (count == 2) {
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d127      	bne.n	80005ae <main+0x106>
                state = STATE_WAY1_RED;
 800055e:	2302      	movs	r3, #2
 8000560:	73fb      	strb	r3, [r7, #15]
                count = 0;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
            }
            break;
 8000566:	e022      	b.n	80005ae <main+0x106>
        case STATE_WAY1_RED:
            // Way 1: RED
            set_light_state(0, 0); // Way 1 RED
 8000568:	463b      	mov	r3, r7
 800056a:	469c      	mov	ip, r3
 800056c:	2100      	movs	r1, #0
 800056e:	2000      	movs	r0, #0
 8000570:	f000 fa64 	bl	8000a3c <set_light_state.1>

            if (num1 < 1) {
 8000574:	4b4e      	ldr	r3, [pc, #312]	@ (80006b0 <main+0x208>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	dc02      	bgt.n	8000582 <main+0xda>
                num1 = 5; // Reset to 5 after reaching 1
 800057c:	4b4c      	ldr	r3, [pc, #304]	@ (80006b0 <main+0x208>)
 800057e:	2205      	movs	r2, #5
 8000580:	601a      	str	r2, [r3, #0]
            }

            display7SEG(num1);
 8000582:	4b4b      	ldr	r3, [pc, #300]	@ (80006b0 <main+0x208>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	463a      	mov	r2, r7
 8000588:	4694      	mov	ip, r2
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fdde 	bl	800014c <display7SEG.0>
            num1--;
 8000590:	4b47      	ldr	r3, [pc, #284]	@ (80006b0 <main+0x208>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	3b01      	subs	r3, #1
 8000596:	4a46      	ldr	r2, [pc, #280]	@ (80006b0 <main+0x208>)
 8000598:	6013      	str	r3, [r2, #0]

            if (count == 5) {
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2b05      	cmp	r3, #5
 800059e:	d108      	bne.n	80005b2 <main+0x10a>
                state = STATE_WAY1_GREEN;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
                count = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
            }
            break;
 80005a8:	e003      	b.n	80005b2 <main+0x10a>
            break;
 80005aa:	bf00      	nop
 80005ac:	e002      	b.n	80005b4 <main+0x10c>
            break;
 80005ae:	bf00      	nop
 80005b0:	e000      	b.n	80005b4 <main+0x10c>
            break;
 80005b2:	bf00      	nop


    }

      switch (state2) {
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	2b05      	cmp	r3, #5
 80005b8:	d006      	beq.n	80005c8 <main+0x120>
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	dc6c      	bgt.n	8000698 <main+0x1f0>
 80005be:	2b03      	cmp	r3, #3
 80005c0:	d023      	beq.n	800060a <main+0x162>
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d042      	beq.n	800064c <main+0x1a4>
 80005c6:	e067      	b.n	8000698 <main+0x1f0>
          case STATE_WAY2_RED:
              // Way 2: RED
              set_light_state(1, 0); // Way 2 RED
 80005c8:	463b      	mov	r3, r7
 80005ca:	469c      	mov	ip, r3
 80005cc:	2100      	movs	r1, #0
 80005ce:	2001      	movs	r0, #1
 80005d0:	f000 fa34 	bl	8000a3c <set_light_state.1>

              if (num2 < 1) {
 80005d4:	4b37      	ldr	r3, [pc, #220]	@ (80006b4 <main+0x20c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	dc02      	bgt.n	80005e2 <main+0x13a>
                  num2 = 5; // Reset to 5 after reaching 1
 80005dc:	4b35      	ldr	r3, [pc, #212]	@ (80006b4 <main+0x20c>)
 80005de:	2205      	movs	r2, #5
 80005e0:	601a      	str	r2, [r3, #0]
              }

              display7SEG2(num2);
 80005e2:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <main+0x20c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	463a      	mov	r2, r7
 80005e8:	4694      	mov	ip, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f000 f864 	bl	80006b8 <display7SEG2.2>
              num2--;
 80005f0:	4b30      	ldr	r3, [pc, #192]	@ (80006b4 <main+0x20c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	3b01      	subs	r3, #1
 80005f6:	4a2f      	ldr	r2, [pc, #188]	@ (80006b4 <main+0x20c>)
 80005f8:	6013      	str	r3, [r2, #0]

              if (count2 == 5) {
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b05      	cmp	r3, #5
 80005fe:	d146      	bne.n	800068e <main+0x1e6>
                  state2 = STATE_WAY2_GREEN;
 8000600:	2303      	movs	r3, #3
 8000602:	73bb      	strb	r3, [r7, #14]
                  count2 = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	607b      	str	r3, [r7, #4]
              }
              break;
 8000608:	e041      	b.n	800068e <main+0x1e6>

          case STATE_WAY2_GREEN:
              // Way 2: GREEN
              set_light_state(1, 2); // Way 2 GREEN
 800060a:	463b      	mov	r3, r7
 800060c:	469c      	mov	ip, r3
 800060e:	2102      	movs	r1, #2
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fa13 	bl	8000a3c <set_light_state.1>

              if (num2 < 1) {
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <main+0x20c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	dc02      	bgt.n	8000624 <main+0x17c>
                  num2 = 3; // Reset to 3 after reaching 1
 800061e:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <main+0x20c>)
 8000620:	2203      	movs	r2, #3
 8000622:	601a      	str	r2, [r3, #0]
              }

              display7SEG2(num2);
 8000624:	4b23      	ldr	r3, [pc, #140]	@ (80006b4 <main+0x20c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	463a      	mov	r2, r7
 800062a:	4694      	mov	ip, r2
 800062c:	4618      	mov	r0, r3
 800062e:	f000 f843 	bl	80006b8 <display7SEG2.2>
              num2--;
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <main+0x20c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b01      	subs	r3, #1
 8000638:	4a1e      	ldr	r2, [pc, #120]	@ (80006b4 <main+0x20c>)
 800063a:	6013      	str	r3, [r2, #0]

              if (count2 == 3) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2b03      	cmp	r3, #3
 8000640:	d127      	bne.n	8000692 <main+0x1ea>
                  state2 = STATE_WAY2_YELLOW;
 8000642:	2304      	movs	r3, #4
 8000644:	73bb      	strb	r3, [r7, #14]
                  count2 = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
              }
              break;
 800064a:	e022      	b.n	8000692 <main+0x1ea>

          case STATE_WAY2_YELLOW:
              // Way 2: YELLOW
              set_light_state(1, 1); // Way 2 YELLOW
 800064c:	463b      	mov	r3, r7
 800064e:	469c      	mov	ip, r3
 8000650:	2101      	movs	r1, #1
 8000652:	2001      	movs	r0, #1
 8000654:	f000 f9f2 	bl	8000a3c <set_light_state.1>

              if (num2 < 1) {
 8000658:	4b16      	ldr	r3, [pc, #88]	@ (80006b4 <main+0x20c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	dc02      	bgt.n	8000666 <main+0x1be>
                  num2 = 2; // Reset to 2 after reaching 1
 8000660:	4b14      	ldr	r3, [pc, #80]	@ (80006b4 <main+0x20c>)
 8000662:	2202      	movs	r2, #2
 8000664:	601a      	str	r2, [r3, #0]
              }

              display7SEG2(num2);
 8000666:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <main+0x20c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	463a      	mov	r2, r7
 800066c:	4694      	mov	ip, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f822 	bl	80006b8 <display7SEG2.2>
              num2--;
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <main+0x20c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	4a0e      	ldr	r2, [pc, #56]	@ (80006b4 <main+0x20c>)
 800067c:	6013      	str	r3, [r2, #0]

              if (count2 == 2) {
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b02      	cmp	r3, #2
 8000682:	d108      	bne.n	8000696 <main+0x1ee>
                  state2 = STATE_WAY2_RED;
 8000684:	2305      	movs	r3, #5
 8000686:	73bb      	strb	r3, [r7, #14]
                  count2 = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
              }
              break;
 800068c:	e003      	b.n	8000696 <main+0x1ee>
              break;
 800068e:	bf00      	nop
 8000690:	e002      	b.n	8000698 <main+0x1f0>
              break;
 8000692:	bf00      	nop
 8000694:	e000      	b.n	8000698 <main+0x1f0>
              break;
 8000696:	bf00      	nop
      }

      count++;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	3301      	adds	r3, #1
 800069c:	60bb      	str	r3, [r7, #8]
      count2++;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3301      	adds	r3, #1
 80006a2:	607b      	str	r3, [r7, #4]
      HAL_Delay(1000);
 80006a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006a8:	f000 fbf2 	bl	8000e90 <HAL_Delay>
      switch (state) {
 80006ac:	e710      	b.n	80004d0 <main+0x28>
 80006ae:	bf00      	nop
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000004 	.word	0x20000004

080006b8 <display7SEG2.2>:
  void display7SEG2(int num) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	f8c7 c000 	str.w	ip, [r7]
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f2c0 81b0 	blt.w	8000a2c <display7SEG2.2+0x374>
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2b09      	cmp	r3, #9
 80006d0:	f300 81ac 	bgt.w	8000a2c <display7SEG2.2+0x374>
    switch (num) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b09      	cmp	r3, #9
 80006d8:	f200 81aa 	bhi.w	8000a30 <display7SEG2.2+0x378>
 80006dc:	a201      	add	r2, pc, #4	@ (adr r2, 80006e4 <display7SEG2.2+0x2c>)
 80006de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e2:	bf00      	nop
 80006e4:	0800070d 	.word	0x0800070d
 80006e8:	0800075d 	.word	0x0800075d
 80006ec:	080007ad 	.word	0x080007ad
 80006f0:	080007fd 	.word	0x080007fd
 80006f4:	0800084d 	.word	0x0800084d
 80006f8:	0800089d 	.word	0x0800089d
 80006fc:	080008ed 	.word	0x080008ed
 8000700:	0800093d 	.word	0x0800093d
 8000704:	0800098d 	.word	0x0800098d
 8000708:	080009dd 	.word	0x080009dd
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	48c9      	ldr	r0, [pc, #804]	@ (8000a38 <display7SEG2.2+0x380>)
 8000712:	f000 fe41 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	@ 0x40
 800071a:	48c7      	ldr	r0, [pc, #796]	@ (8000a38 <display7SEG2.2+0x380>)
 800071c:	f000 fe3c 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2180      	movs	r1, #128	@ 0x80
 8000724:	48c4      	ldr	r0, [pc, #784]	@ (8000a38 <display7SEG2.2+0x380>)
 8000726:	f000 fe37 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000730:	48c1      	ldr	r0, [pc, #772]	@ (8000a38 <display7SEG2.2+0x380>)
 8000732:	f000 fe31 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800073c:	48be      	ldr	r0, [pc, #760]	@ (8000a38 <display7SEG2.2+0x380>)
 800073e:	f000 fe2b 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000748:	48bb      	ldr	r0, [pc, #748]	@ (8000a38 <display7SEG2.2+0x380>)
 800074a:	f000 fe25 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000754:	48b8      	ldr	r0, [pc, #736]	@ (8000a38 <display7SEG2.2+0x380>)
 8000756:	f000 fe1f 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800075a:	e16a      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	48b5      	ldr	r0, [pc, #724]	@ (8000a38 <display7SEG2.2+0x380>)
 8000762:	f000 fe19 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2140      	movs	r1, #64	@ 0x40
 800076a:	48b3      	ldr	r0, [pc, #716]	@ (8000a38 <display7SEG2.2+0x380>)
 800076c:	f000 fe14 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2180      	movs	r1, #128	@ 0x80
 8000774:	48b0      	ldr	r0, [pc, #704]	@ (8000a38 <display7SEG2.2+0x380>)
 8000776:	f000 fe0f 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000780:	48ad      	ldr	r0, [pc, #692]	@ (8000a38 <display7SEG2.2+0x380>)
 8000782:	f000 fe09 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800078c:	48aa      	ldr	r0, [pc, #680]	@ (8000a38 <display7SEG2.2+0x380>)
 800078e:	f000 fe03 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000798:	48a7      	ldr	r0, [pc, #668]	@ (8000a38 <display7SEG2.2+0x380>)
 800079a:	f000 fdfd 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007a4:	48a4      	ldr	r0, [pc, #656]	@ (8000a38 <display7SEG2.2+0x380>)
 80007a6:	f000 fdf7 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80007aa:	e142      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2120      	movs	r1, #32
 80007b0:	48a1      	ldr	r0, [pc, #644]	@ (8000a38 <display7SEG2.2+0x380>)
 80007b2:	f000 fdf1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2140      	movs	r1, #64	@ 0x40
 80007ba:	489f      	ldr	r0, [pc, #636]	@ (8000a38 <display7SEG2.2+0x380>)
 80007bc:	f000 fdec 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2180      	movs	r1, #128	@ 0x80
 80007c4:	489c      	ldr	r0, [pc, #624]	@ (8000a38 <display7SEG2.2+0x380>)
 80007c6:	f000 fde7 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007d0:	4899      	ldr	r0, [pc, #612]	@ (8000a38 <display7SEG2.2+0x380>)
 80007d2:	f000 fde1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007dc:	4896      	ldr	r0, [pc, #600]	@ (8000a38 <display7SEG2.2+0x380>)
 80007de:	f000 fddb 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e8:	4893      	ldr	r0, [pc, #588]	@ (8000a38 <display7SEG2.2+0x380>)
 80007ea:	f000 fdd5 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f4:	4890      	ldr	r0, [pc, #576]	@ (8000a38 <display7SEG2.2+0x380>)
 80007f6:	f000 fdcf 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80007fa:	e11a      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	488d      	ldr	r0, [pc, #564]	@ (8000a38 <display7SEG2.2+0x380>)
 8000802:	f000 fdc9 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	@ 0x40
 800080a:	488b      	ldr	r0, [pc, #556]	@ (8000a38 <display7SEG2.2+0x380>)
 800080c:	f000 fdc4 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2180      	movs	r1, #128	@ 0x80
 8000814:	4888      	ldr	r0, [pc, #544]	@ (8000a38 <display7SEG2.2+0x380>)
 8000816:	f000 fdbf 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000820:	4885      	ldr	r0, [pc, #532]	@ (8000a38 <display7SEG2.2+0x380>)
 8000822:	f000 fdb9 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_SET);
 8000826:	2201      	movs	r2, #1
 8000828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800082c:	4882      	ldr	r0, [pc, #520]	@ (8000a38 <display7SEG2.2+0x380>)
 800082e:	f000 fdb3 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000838:	487f      	ldr	r0, [pc, #508]	@ (8000a38 <display7SEG2.2+0x380>)
 800083a:	f000 fdad 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000844:	487c      	ldr	r0, [pc, #496]	@ (8000a38 <display7SEG2.2+0x380>)
 8000846:	f000 fda7 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800084a:	e0f2      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2120      	movs	r1, #32
 8000850:	4879      	ldr	r0, [pc, #484]	@ (8000a38 <display7SEG2.2+0x380>)
 8000852:	f000 fda1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2140      	movs	r1, #64	@ 0x40
 800085a:	4877      	ldr	r0, [pc, #476]	@ (8000a38 <display7SEG2.2+0x380>)
 800085c:	f000 fd9c 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2180      	movs	r1, #128	@ 0x80
 8000864:	4874      	ldr	r0, [pc, #464]	@ (8000a38 <display7SEG2.2+0x380>)
 8000866:	f000 fd97 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000870:	4871      	ldr	r0, [pc, #452]	@ (8000a38 <display7SEG2.2+0x380>)
 8000872:	f000 fd91 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800087c:	486e      	ldr	r0, [pc, #440]	@ (8000a38 <display7SEG2.2+0x380>)
 800087e:	f000 fd8b 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_RESET);
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000888:	486b      	ldr	r0, [pc, #428]	@ (8000a38 <display7SEG2.2+0x380>)
 800088a:	f000 fd85 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000894:	4868      	ldr	r0, [pc, #416]	@ (8000a38 <display7SEG2.2+0x380>)
 8000896:	f000 fd7f 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800089a:	e0ca      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2120      	movs	r1, #32
 80008a0:	4865      	ldr	r0, [pc, #404]	@ (8000a38 <display7SEG2.2+0x380>)
 80008a2:	f000 fd79 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2140      	movs	r1, #64	@ 0x40
 80008aa:	4863      	ldr	r0, [pc, #396]	@ (8000a38 <display7SEG2.2+0x380>)
 80008ac:	f000 fd74 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2180      	movs	r1, #128	@ 0x80
 80008b4:	4860      	ldr	r0, [pc, #384]	@ (8000a38 <display7SEG2.2+0x380>)
 80008b6:	f000 fd6f 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008c0:	485d      	ldr	r0, [pc, #372]	@ (8000a38 <display7SEG2.2+0x380>)
 80008c2:	f000 fd69 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_SET);
 80008c6:	2201      	movs	r2, #1
 80008c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80008cc:	485a      	ldr	r0, [pc, #360]	@ (8000a38 <display7SEG2.2+0x380>)
 80008ce:	f000 fd63 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d8:	4857      	ldr	r0, [pc, #348]	@ (8000a38 <display7SEG2.2+0x380>)
 80008da:	f000 fd5d 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008e4:	4854      	ldr	r0, [pc, #336]	@ (8000a38 <display7SEG2.2+0x380>)
 80008e6:	f000 fd57 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80008ea:	e0a2      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2120      	movs	r1, #32
 80008f0:	4851      	ldr	r0, [pc, #324]	@ (8000a38 <display7SEG2.2+0x380>)
 80008f2:	f000 fd51 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_SET);
 80008f6:	2201      	movs	r2, #1
 80008f8:	2140      	movs	r1, #64	@ 0x40
 80008fa:	484f      	ldr	r0, [pc, #316]	@ (8000a38 <display7SEG2.2+0x380>)
 80008fc:	f000 fd4c 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 8000900:	2200      	movs	r2, #0
 8000902:	2180      	movs	r1, #128	@ 0x80
 8000904:	484c      	ldr	r0, [pc, #304]	@ (8000a38 <display7SEG2.2+0x380>)
 8000906:	f000 fd47 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000910:	4849      	ldr	r0, [pc, #292]	@ (8000a38 <display7SEG2.2+0x380>)
 8000912:	f000 fd41 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091c:	4846      	ldr	r0, [pc, #280]	@ (8000a38 <display7SEG2.2+0x380>)
 800091e:	f000 fd3b 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000928:	4843      	ldr	r0, [pc, #268]	@ (8000a38 <display7SEG2.2+0x380>)
 800092a:	f000 fd35 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000934:	4840      	ldr	r0, [pc, #256]	@ (8000a38 <display7SEG2.2+0x380>)
 8000936:	f000 fd2f 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800093a:	e07a      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	2120      	movs	r1, #32
 8000940:	483d      	ldr	r0, [pc, #244]	@ (8000a38 <display7SEG2.2+0x380>)
 8000942:	f000 fd29 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	2140      	movs	r1, #64	@ 0x40
 800094a:	483b      	ldr	r0, [pc, #236]	@ (8000a38 <display7SEG2.2+0x380>)
 800094c:	f000 fd24 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	2180      	movs	r1, #128	@ 0x80
 8000954:	4838      	ldr	r0, [pc, #224]	@ (8000a38 <display7SEG2.2+0x380>)
 8000956:	f000 fd1f 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000960:	4835      	ldr	r0, [pc, #212]	@ (8000a38 <display7SEG2.2+0x380>)
 8000962:	f000 fd19 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_SET);
 8000966:	2201      	movs	r2, #1
 8000968:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800096c:	4832      	ldr	r0, [pc, #200]	@ (8000a38 <display7SEG2.2+0x380>)
 800096e:	f000 fd13 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_SET);
 8000972:	2201      	movs	r2, #1
 8000974:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000978:	482f      	ldr	r0, [pc, #188]	@ (8000a38 <display7SEG2.2+0x380>)
 800097a:	f000 fd0d 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000984:	482c      	ldr	r0, [pc, #176]	@ (8000a38 <display7SEG2.2+0x380>)
 8000986:	f000 fd07 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 800098a:	e052      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2120      	movs	r1, #32
 8000990:	4829      	ldr	r0, [pc, #164]	@ (8000a38 <display7SEG2.2+0x380>)
 8000992:	f000 fd01 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	4827      	ldr	r0, [pc, #156]	@ (8000a38 <display7SEG2.2+0x380>)
 800099c:	f000 fcfc 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2180      	movs	r1, #128	@ 0x80
 80009a4:	4824      	ldr	r0, [pc, #144]	@ (8000a38 <display7SEG2.2+0x380>)
 80009a6:	f000 fcf7 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009b0:	4821      	ldr	r0, [pc, #132]	@ (8000a38 <display7SEG2.2+0x380>)
 80009b2:	f000 fcf1 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009bc:	481e      	ldr	r0, [pc, #120]	@ (8000a38 <display7SEG2.2+0x380>)
 80009be:	f000 fceb 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c8:	481b      	ldr	r0, [pc, #108]	@ (8000a38 <display7SEG2.2+0x380>)
 80009ca:	f000 fce5 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80009d4:	4818      	ldr	r0, [pc, #96]	@ (8000a38 <display7SEG2.2+0x380>)
 80009d6:	f000 fcdf 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 80009da:	e02a      	b.n	8000a32 <display7SEG2.2+0x37a>
            HAL_GPIO_WritePin(GPIOB, SEG_0b_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	2120      	movs	r1, #32
 80009e0:	4815      	ldr	r0, [pc, #84]	@ (8000a38 <display7SEG2.2+0x380>)
 80009e2:	f000 fcd9 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_1b_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2140      	movs	r1, #64	@ 0x40
 80009ea:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <display7SEG2.2+0x380>)
 80009ec:	f000 fcd4 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_2b_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	4810      	ldr	r0, [pc, #64]	@ (8000a38 <display7SEG2.2+0x380>)
 80009f6:	f000 fccf 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_3b_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <display7SEG2.2+0x380>)
 8000a02:	f000 fcc9 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_4b_Pin, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0c:	480a      	ldr	r0, [pc, #40]	@ (8000a38 <display7SEG2.2+0x380>)
 8000a0e:	f000 fcc3 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_5b_Pin, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a18:	4807      	ldr	r0, [pc, #28]	@ (8000a38 <display7SEG2.2+0x380>)
 8000a1a:	f000 fcbd 	bl	8001398 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, SEG_6b_Pin, GPIO_PIN_RESET);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <display7SEG2.2+0x380>)
 8000a26:	f000 fcb7 	bl	8001398 <HAL_GPIO_WritePin>
            break;
 8000a2a:	e002      	b.n	8000a32 <display7SEG2.2+0x37a>
    if (num < 0 || num > 9) return; // Ensure the number is between 0 and 9
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <display7SEG2.2+0x37a>
            break;
 8000a30:	bf00      	nop
  }
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40010c00 	.word	0x40010c00

08000a3c <set_light_state.1>:
  void set_light_state(int way, int state) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	f8c7 c004 	str.w	ip, [r7, #4]
      switch (way) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d003      	beq.n	8000a58 <set_light_state.1+0x1c>
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d044      	beq.n	8000ae0 <set_light_state.1+0xa4>
    }
 8000a56:	e084      	b.n	8000b62 <set_light_state.1+0x126>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	2b02      	cmp	r3, #2
 8000a5c:	d02d      	beq.n	8000aba <set_light_state.1+0x7e>
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	2b02      	cmp	r3, #2
 8000a62:	dc7b      	bgt.n	8000b5c <set_light_state.1+0x120>
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d003      	beq.n	8000a72 <set_light_state.1+0x36>
 8000a6a:	68bb      	ldr	r3, [r7, #8]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d012      	beq.n	8000a96 <set_light_state.1+0x5a>
              break;
 8000a70:	e074      	b.n	8000b5c <set_light_state.1+0x120>
                      HAL_GPIO_WritePin(GPIOB, LED_1_Pin, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2101      	movs	r1, #1
 8000a76:	483d      	ldr	r0, [pc, #244]	@ (8000b6c <set_light_state.1+0x130>)
 8000a78:	f000 fc8e 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_12_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a82:	483a      	ldr	r0, [pc, #232]	@ (8000b6c <set_light_state.1+0x130>)
 8000a84:	f000 fc88 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_11_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a8e:	4837      	ldr	r0, [pc, #220]	@ (8000b6c <set_light_state.1+0x130>)
 8000a90:	f000 fc82 	bl	8001398 <HAL_GPIO_WritePin>
                      break;
 8000a94:	e023      	b.n	8000ade <set_light_state.1+0xa2>
                      HAL_GPIO_WritePin(GPIOB, LED_1_Pin, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4834      	ldr	r0, [pc, #208]	@ (8000b6c <set_light_state.1+0x130>)
 8000a9c:	f000 fc7c 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_12_Pin, GPIO_PIN_SET);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aa6:	4831      	ldr	r0, [pc, #196]	@ (8000b6c <set_light_state.1+0x130>)
 8000aa8:	f000 fc76 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_11_Pin, GPIO_PIN_RESET);
 8000aac:	2200      	movs	r2, #0
 8000aae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ab2:	482e      	ldr	r0, [pc, #184]	@ (8000b6c <set_light_state.1+0x130>)
 8000ab4:	f000 fc70 	bl	8001398 <HAL_GPIO_WritePin>
                      break;
 8000ab8:	e011      	b.n	8000ade <set_light_state.1+0xa2>
                      HAL_GPIO_WritePin(GPIOB, LED_1_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2101      	movs	r1, #1
 8000abe:	482b      	ldr	r0, [pc, #172]	@ (8000b6c <set_light_state.1+0x130>)
 8000ac0:	f000 fc6a 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_12_Pin, GPIO_PIN_RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aca:	4828      	ldr	r0, [pc, #160]	@ (8000b6c <set_light_state.1+0x130>)
 8000acc:	f000 fc64 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_11_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad6:	4825      	ldr	r0, [pc, #148]	@ (8000b6c <set_light_state.1+0x130>)
 8000ad8:	f000 fc5e 	bl	8001398 <HAL_GPIO_WritePin>
                      break;
 8000adc:	bf00      	nop
              break;
 8000ade:	e03d      	b.n	8000b5c <set_light_state.1+0x120>
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d029      	beq.n	8000b3a <set_light_state.1+0xfe>
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	dc39      	bgt.n	8000b60 <set_light_state.1+0x124>
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <set_light_state.1+0xbe>
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d010      	beq.n	8000b1a <set_light_state.1+0xde>
              break;
 8000af8:	e032      	b.n	8000b60 <set_light_state.1+0x124>
                      HAL_GPIO_WritePin(GPIOB, LED_4_Pin, GPIO_PIN_SET);
 8000afa:	2201      	movs	r2, #1
 8000afc:	2110      	movs	r1, #16
 8000afe:	481b      	ldr	r0, [pc, #108]	@ (8000b6c <set_light_state.1+0x130>)
 8000b00:	f000 fc4a 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_3_Pin, GPIO_PIN_RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	2108      	movs	r1, #8
 8000b08:	4818      	ldr	r0, [pc, #96]	@ (8000b6c <set_light_state.1+0x130>)
 8000b0a:	f000 fc45 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_2_Pin, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2102      	movs	r1, #2
 8000b12:	4816      	ldr	r0, [pc, #88]	@ (8000b6c <set_light_state.1+0x130>)
 8000b14:	f000 fc40 	bl	8001398 <HAL_GPIO_WritePin>
                      break;
 8000b18:	e01f      	b.n	8000b5a <set_light_state.1+0x11e>
                      HAL_GPIO_WritePin(GPIOB, LED_4_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2110      	movs	r1, #16
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <set_light_state.1+0x130>)
 8000b20:	f000 fc3a 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_3_Pin, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2108      	movs	r1, #8
 8000b28:	4810      	ldr	r0, [pc, #64]	@ (8000b6c <set_light_state.1+0x130>)
 8000b2a:	f000 fc35 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_2_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2102      	movs	r1, #2
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <set_light_state.1+0x130>)
 8000b34:	f000 fc30 	bl	8001398 <HAL_GPIO_WritePin>
                      break;
 8000b38:	e00f      	b.n	8000b5a <set_light_state.1+0x11e>
                      HAL_GPIO_WritePin(GPIOB, LED_4_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2110      	movs	r1, #16
 8000b3e:	480b      	ldr	r0, [pc, #44]	@ (8000b6c <set_light_state.1+0x130>)
 8000b40:	f000 fc2a 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_3_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2108      	movs	r1, #8
 8000b48:	4808      	ldr	r0, [pc, #32]	@ (8000b6c <set_light_state.1+0x130>)
 8000b4a:	f000 fc25 	bl	8001398 <HAL_GPIO_WritePin>
                      HAL_GPIO_WritePin(GPIOB, LED_2_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2102      	movs	r1, #2
 8000b52:	4806      	ldr	r0, [pc, #24]	@ (8000b6c <set_light_state.1+0x130>)
 8000b54:	f000 fc20 	bl	8001398 <HAL_GPIO_WritePin>
                      break;
 8000b58:	bf00      	nop
              break;
 8000b5a:	e001      	b.n	8000b60 <set_light_state.1+0x124>
              break;
 8000b5c:	bf00      	nop
 8000b5e:	e000      	b.n	8000b62 <set_light_state.1+0x126>
              break;
 8000b60:	bf00      	nop
    }
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010c00 	.word	0x40010c00

08000b70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b090      	sub	sp, #64	@ 0x40
 8000b74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	2228      	movs	r2, #40	@ 0x28
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f800 	bl	8001b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f000 fc0e 	bl	80013c8 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000bb2:	f000 f87b 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fe7c 	bl	80018cc <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000bda:	f000 f867 	bl	8000cac <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	@ 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 0310 	add.w	r3, r7, #16
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfc:	4b28      	ldr	r3, [pc, #160]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a27      	ldr	r2, [pc, #156]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c02:	f043 0320 	orr.w	r3, r3, #32
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b25      	ldr	r3, [pc, #148]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0320 	and.w	r3, r3, #32
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6193      	str	r3, [r2, #24]
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c22:	699b      	ldr	r3, [r3, #24]
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <MX_GPIO_Init+0xb8>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0308 	and.w	r3, r3, #8
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000c44:	2200      	movs	r2, #0
 8000c46:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8000c4a:	4816      	ldr	r0, [pc, #88]	@ (8000ca4 <MX_GPIO_Init+0xbc>)
 8000c4c:	f000 fba4 	bl	8001398 <HAL_GPIO_WritePin>
                          |SEG_4_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
                          |SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_2_Pin|LED_10_Pin|LED_11_Pin
 8000c50:	2200      	movs	r2, #0
 8000c52:	f647 71fb 	movw	r1, #32763	@ 0x7ffb
 8000c56:	4814      	ldr	r0, [pc, #80]	@ (8000ca8 <MX_GPIO_Init+0xc0>)
 8000c58:	f000 fb9e 	bl	8001398 <HAL_GPIO_WritePin>
                          |SEG_3b_Pin|SEG_4b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_0_Pin SEG_1_Pin SEG_2_Pin SEG_3_Pin
                           SEG_4_Pin LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin
                           SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = SEG_0_Pin|SEG_1_Pin|SEG_2_Pin|SEG_3_Pin
 8000c5c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000c60:	613b      	str	r3, [r7, #16]
                          |SEG_4_Pin|LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin
                          |SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	4619      	mov	r1, r3
 8000c74:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <MX_GPIO_Init+0xbc>)
 8000c76:	f000 fa13 	bl	80010a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_10_Pin LED_11_Pin
                           LED_12_Pin SEG_5b_Pin SEG_6b_Pin LED_3_Pin
                           LED_4_Pin SEG_0b_Pin SEG_1b_Pin SEG_2b_Pin
                           SEG_3b_Pin SEG_4b_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_10_Pin|LED_11_Pin
 8000c7a:	f647 73fb 	movw	r3, #32763	@ 0x7ffb
 8000c7e:	613b      	str	r3, [r7, #16]
                          |LED_12_Pin|SEG_5b_Pin|SEG_6b_Pin|LED_3_Pin
                          |LED_4_Pin|SEG_0b_Pin|SEG_1b_Pin|SEG_2b_Pin
                          |SEG_3b_Pin|SEG_4b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_GPIO_Init+0xc0>)
 8000c94:	f000 fa04 	bl	80010a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010800 	.word	0x40010800
 8000ca8:	40010c00 	.word	0x40010c00

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cc4:	f043 0301 	orr.w	r3, r3, #1
 8000cc8:	6193      	str	r3, [r2, #24]
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000cdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d14 <HAL_MspInit+0x5c>)
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_MspInit+0x60>)
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_MspInit+0x60>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000

08000d1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <NMI_Handler+0x4>

08000d24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <HardFault_Handler+0x4>

08000d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <MemManage_Handler+0x4>

08000d34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f874 	bl	8000e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d80:	f7ff fff8 	bl	8000d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d84:	480b      	ldr	r0, [pc, #44]	@ (8000db4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d86:	490c      	ldr	r1, [pc, #48]	@ (8000db8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d88:	4a0c      	ldr	r2, [pc, #48]	@ (8000dbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a09      	ldr	r2, [pc, #36]	@ (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d9c:	4c09      	ldr	r4, [pc, #36]	@ (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000daa:	f000 fef3 	bl	8001b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dae:	f7ff fb7b 	bl	80004a8 <main>
  bx lr
 8000db2:	4770      	bx	lr
  ldr r0, =_sdata
 8000db4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000db8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dbc:	08001c20 	.word	0x08001c20
  ldr r2, =_sbss
 8000dc0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dc4:	20000034 	.word	0x20000034

08000dc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_2_IRQHandler>
	...

08000dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <HAL_Init+0x28>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <HAL_Init+0x28>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ddc:	2003      	movs	r0, #3
 8000dde:	f000 f92b 	bl	8001038 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de2:	200f      	movs	r0, #15
 8000de4:	f000 f808 	bl	8000df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de8:	f7ff ff66 	bl	8000cb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40022000 	.word	0x40022000

08000df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <HAL_InitTick+0x54>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	4b12      	ldr	r3, [pc, #72]	@ (8000e50 <HAL_InitTick+0x58>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e16:	4618      	mov	r0, r3
 8000e18:	f000 f935 	bl	8001086 <HAL_SYSTICK_Config>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00e      	b.n	8000e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2b0f      	cmp	r3, #15
 8000e2a:	d80a      	bhi.n	8000e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	6879      	ldr	r1, [r7, #4]
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f000 f90b 	bl	800104e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e38:	4a06      	ldr	r2, [pc, #24]	@ (8000e54 <HAL_InitTick+0x5c>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000008 	.word	0x20000008
 8000e50:	20000010 	.word	0x20000010
 8000e54:	2000000c 	.word	0x2000000c

08000e58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e5c:	4b05      	ldr	r3, [pc, #20]	@ (8000e74 <HAL_IncTick+0x1c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4413      	add	r3, r2
 8000e68:	4a03      	ldr	r2, [pc, #12]	@ (8000e78 <HAL_IncTick+0x20>)
 8000e6a:	6013      	str	r3, [r2, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000010 	.word	0x20000010
 8000e78:	20000030 	.word	0x20000030

08000e7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e80:	4b02      	ldr	r3, [pc, #8]	@ (8000e8c <HAL_GetTick+0x10>)
 8000e82:	681b      	ldr	r3, [r3, #0]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	20000030 	.word	0x20000030

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff fff0 	bl	8000e7c <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffe0 	bl	8000e7c <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000010 	.word	0x20000010

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bc80      	pop	{r7}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001004:	d301      	bcc.n	800100a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001006:	2301      	movs	r3, #1
 8001008:	e00f      	b.n	800102a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <SysTick_Config+0x40>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001012:	210f      	movs	r1, #15
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f7ff ff90 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <SysTick_Config+0x40>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <SysTick_Config+0x40>)
 8001024:	2207      	movs	r2, #7
 8001026:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff49 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800104e:	b580      	push	{r7, lr}
 8001050:	b086      	sub	sp, #24
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	60b9      	str	r1, [r7, #8]
 8001058:	607a      	str	r2, [r7, #4]
 800105a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001060:	f7ff ff5e 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001064:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6978      	ldr	r0, [r7, #20]
 800106c:	f7ff ff90 	bl	8000f90 <NVIC_EncodePriority>
 8001070:	4602      	mov	r2, r0
 8001072:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001076:	4611      	mov	r1, r2
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ff5f 	bl	8000f3c <__NVIC_SetPriority>
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffb0 	bl	8000ff4 <SysTick_Config>
 8001094:	4603      	mov	r3, r0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b08b      	sub	sp, #44	@ 0x2c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b2:	e161      	b.n	8001378 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010b4:	2201      	movs	r2, #1
 80010b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	f040 8150 	bne.w	8001372 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a97      	ldr	r2, [pc, #604]	@ (8001334 <HAL_GPIO_Init+0x294>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d05e      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010dc:	4a95      	ldr	r2, [pc, #596]	@ (8001334 <HAL_GPIO_Init+0x294>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d875      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010e2:	4a95      	ldr	r2, [pc, #596]	@ (8001338 <HAL_GPIO_Init+0x298>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d058      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010e8:	4a93      	ldr	r2, [pc, #588]	@ (8001338 <HAL_GPIO_Init+0x298>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d86f      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010ee:	4a93      	ldr	r2, [pc, #588]	@ (800133c <HAL_GPIO_Init+0x29c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d052      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 80010f4:	4a91      	ldr	r2, [pc, #580]	@ (800133c <HAL_GPIO_Init+0x29c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d869      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 80010fa:	4a91      	ldr	r2, [pc, #580]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d04c      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 8001100:	4a8f      	ldr	r2, [pc, #572]	@ (8001340 <HAL_GPIO_Init+0x2a0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d863      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001106:	4a8f      	ldr	r2, [pc, #572]	@ (8001344 <HAL_GPIO_Init+0x2a4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d046      	beq.n	800119a <HAL_GPIO_Init+0xfa>
 800110c:	4a8d      	ldr	r2, [pc, #564]	@ (8001344 <HAL_GPIO_Init+0x2a4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d85d      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 8001112:	2b12      	cmp	r3, #18
 8001114:	d82a      	bhi.n	800116c <HAL_GPIO_Init+0xcc>
 8001116:	2b12      	cmp	r3, #18
 8001118:	d859      	bhi.n	80011ce <HAL_GPIO_Init+0x12e>
 800111a:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <HAL_GPIO_Init+0x80>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	0800119b 	.word	0x0800119b
 8001124:	08001175 	.word	0x08001175
 8001128:	08001187 	.word	0x08001187
 800112c:	080011c9 	.word	0x080011c9
 8001130:	080011cf 	.word	0x080011cf
 8001134:	080011cf 	.word	0x080011cf
 8001138:	080011cf 	.word	0x080011cf
 800113c:	080011cf 	.word	0x080011cf
 8001140:	080011cf 	.word	0x080011cf
 8001144:	080011cf 	.word	0x080011cf
 8001148:	080011cf 	.word	0x080011cf
 800114c:	080011cf 	.word	0x080011cf
 8001150:	080011cf 	.word	0x080011cf
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011cf 	.word	0x080011cf
 800115c:	080011cf 	.word	0x080011cf
 8001160:	080011cf 	.word	0x080011cf
 8001164:	0800117d 	.word	0x0800117d
 8001168:	08001191 	.word	0x08001191
 800116c:	4a76      	ldr	r2, [pc, #472]	@ (8001348 <HAL_GPIO_Init+0x2a8>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001172:	e02c      	b.n	80011ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e029      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	3304      	adds	r3, #4
 8001182:	623b      	str	r3, [r7, #32]
          break;
 8001184:	e024      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	3308      	adds	r3, #8
 800118c:	623b      	str	r3, [r7, #32]
          break;
 800118e:	e01f      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	330c      	adds	r3, #12
 8001196:	623b      	str	r3, [r7, #32]
          break;
 8001198:	e01a      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011a2:	2304      	movs	r3, #4
 80011a4:	623b      	str	r3, [r7, #32]
          break;
 80011a6:	e013      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d105      	bne.n	80011bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011b0:	2308      	movs	r3, #8
 80011b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	611a      	str	r2, [r3, #16]
          break;
 80011ba:	e009      	b.n	80011d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011bc:	2308      	movs	r3, #8
 80011be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	615a      	str	r2, [r3, #20]
          break;
 80011c6:	e003      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e000      	b.n	80011d0 <HAL_GPIO_Init+0x130>
          break;
 80011ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	2bff      	cmp	r3, #255	@ 0xff
 80011d4:	d801      	bhi.n	80011da <HAL_GPIO_Init+0x13a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	e001      	b.n	80011de <HAL_GPIO_Init+0x13e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3304      	adds	r3, #4
 80011de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	2bff      	cmp	r3, #255	@ 0xff
 80011e4:	d802      	bhi.n	80011ec <HAL_GPIO_Init+0x14c>
 80011e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x152>
 80011ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ee:	3b08      	subs	r3, #8
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	210f      	movs	r1, #15
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	6a39      	ldr	r1, [r7, #32]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 80a9 	beq.w	8001372 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001220:	4b4a      	ldr	r3, [pc, #296]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 8001222:	699b      	ldr	r3, [r3, #24]
 8001224:	4a49      	ldr	r2, [pc, #292]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 8001226:	f043 0301 	orr.w	r3, r3, #1
 800122a:	6193      	str	r3, [r2, #24]
 800122c:	4b47      	ldr	r3, [pc, #284]	@ (800134c <HAL_GPIO_Init+0x2ac>)
 800122e:	699b      	ldr	r3, [r3, #24]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001238:	4a45      	ldr	r2, [pc, #276]	@ (8001350 <HAL_GPIO_Init+0x2b0>)
 800123a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123c:	089b      	lsrs	r3, r3, #2
 800123e:	3302      	adds	r3, #2
 8001240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001244:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	68fa      	ldr	r2, [r7, #12]
 8001258:	4013      	ands	r3, r2
 800125a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a3d      	ldr	r2, [pc, #244]	@ (8001354 <HAL_GPIO_Init+0x2b4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d00d      	beq.n	8001280 <HAL_GPIO_Init+0x1e0>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a3c      	ldr	r2, [pc, #240]	@ (8001358 <HAL_GPIO_Init+0x2b8>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d007      	beq.n	800127c <HAL_GPIO_Init+0x1dc>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4a3b      	ldr	r2, [pc, #236]	@ (800135c <HAL_GPIO_Init+0x2bc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d101      	bne.n	8001278 <HAL_GPIO_Init+0x1d8>
 8001274:	2302      	movs	r3, #2
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001278:	2303      	movs	r3, #3
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1e2>
 8001280:	2300      	movs	r3, #0
 8001282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001292:	492f      	ldr	r1, [pc, #188]	@ (8001350 <HAL_GPIO_Init+0x2b0>)
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d006      	beq.n	80012ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	492b      	ldr	r1, [pc, #172]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
 80012b8:	e006      	b.n	80012c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ba:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	4927      	ldr	r1, [pc, #156]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012c4:	4013      	ands	r3, r2
 80012c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012d6:	68da      	ldr	r2, [r3, #12]
 80012d8:	4921      	ldr	r1, [pc, #132]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	60cb      	str	r3, [r1, #12]
 80012e0:	e006      	b.n	80012f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012e4:	68da      	ldr	r2, [r3, #12]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	43db      	mvns	r3, r3
 80012ea:	491d      	ldr	r1, [pc, #116]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012fc:	4b18      	ldr	r3, [pc, #96]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4917      	ldr	r1, [pc, #92]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
 8001308:	e006      	b.n	8001318 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800130a:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	43db      	mvns	r3, r3
 8001312:	4913      	ldr	r1, [pc, #76]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 8001314:	4013      	ands	r3, r2
 8001316:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d01f      	beq.n	8001364 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	490d      	ldr	r1, [pc, #52]	@ (8001360 <HAL_GPIO_Init+0x2c0>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]
 8001330:	e01f      	b.n	8001372 <HAL_GPIO_Init+0x2d2>
 8001332:	bf00      	nop
 8001334:	10320000 	.word	0x10320000
 8001338:	10310000 	.word	0x10310000
 800133c:	10220000 	.word	0x10220000
 8001340:	10210000 	.word	0x10210000
 8001344:	10120000 	.word	0x10120000
 8001348:	10110000 	.word	0x10110000
 800134c:	40021000 	.word	0x40021000
 8001350:	40010000 	.word	0x40010000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	40011000 	.word	0x40011000
 8001360:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001364:	4b0b      	ldr	r3, [pc, #44]	@ (8001394 <HAL_GPIO_Init+0x2f4>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	43db      	mvns	r3, r3
 800136c:	4909      	ldr	r1, [pc, #36]	@ (8001394 <HAL_GPIO_Init+0x2f4>)
 800136e:	4013      	ands	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	3301      	adds	r3, #1
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	fa22 f303 	lsr.w	r3, r2, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	f47f ae96 	bne.w	80010b4 <HAL_GPIO_Init+0x14>
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	372c      	adds	r7, #44	@ 0x2c
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40010400 	.word	0x40010400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	611a      	str	r2, [r3, #16]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e272      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8087 	beq.w	80014f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e8:	4b92      	ldr	r3, [pc, #584]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00c      	beq.n	800140e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d112      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
 8001400:	4b8c      	ldr	r3, [pc, #560]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140c:	d10b      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4b89      	ldr	r3, [pc, #548]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x12c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d168      	bne.n	80014f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e24c      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x76>
 8001430:	4b80      	ldr	r3, [pc, #512]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7f      	ldr	r2, [pc, #508]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e02e      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x98>
 8001446:	4b7b      	ldr	r3, [pc, #492]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7a      	ldr	r2, [pc, #488]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b78      	ldr	r3, [pc, #480]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a77      	ldr	r2, [pc, #476]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0xbc>
 800146a:	4b72      	ldr	r3, [pc, #456]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a71      	ldr	r2, [pc, #452]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001484:	4b6b      	ldr	r3, [pc, #428]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6a      	ldr	r2, [pc, #424]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b68      	ldr	r3, [pc, #416]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a67      	ldr	r2, [pc, #412]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800149a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcea 	bl	8000e7c <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fce6 	bl	8000e7c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e200      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xe4>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fcd6 	bl	8000e7c <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcd2 	bl	8000e7c <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	@ 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1ec      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x10c>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	4b4c      	ldr	r3, [pc, #304]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150e:	4b49      	ldr	r3, [pc, #292]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
 800151a:	4b46      	ldr	r3, [pc, #280]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b43      	ldr	r3, [pc, #268]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1c0      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b3d      	ldr	r3, [pc, #244]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4939      	ldr	r1, [pc, #228]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b36      	ldr	r3, [pc, #216]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fc8b 	bl	8000e7c <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fc87 	bl	8000e7c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4927      	ldr	r1, [pc, #156]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b26      	ldr	r3, [pc, #152]	@ (8001638 <HAL_RCC_OscConfig+0x270>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc6a 	bl	8000e7c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc66 	bl	8000e7c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e180      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03a      	beq.n	800164c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d019      	beq.n	8001612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <HAL_RCC_OscConfig+0x274>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fc4a 	bl	8000e7c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc46 	bl	8000e7c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e160      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f000 fa9c 	bl	8001b48 <RCC_Delay>
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_RCC_OscConfig+0x274>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fc30 	bl	8000e7c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc2c 	bl	8000e7c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d908      	bls.n	8001640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e146      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	42420000 	.word	0x42420000
 800163c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b92      	ldr	r3, [pc, #584]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e9      	bne.n	8001620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a6 	beq.w	80017a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b8b      	ldr	r3, [pc, #556]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10d      	bne.n	8001686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b88      	ldr	r3, [pc, #544]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a87      	ldr	r2, [pc, #540]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b85      	ldr	r3, [pc, #532]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b82      	ldr	r3, [pc, #520]	@ (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001692:	4b7f      	ldr	r3, [pc, #508]	@ (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7e      	ldr	r2, [pc, #504]	@ (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff fbed 	bl	8000e7c <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7ff fbe9 	bl	8000e7c <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	@ 0x64
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e103      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b75      	ldr	r3, [pc, #468]	@ (8001890 <HAL_RCC_OscConfig+0x4c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x312>
 80016cc:	4b6f      	ldr	r3, [pc, #444]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e02d      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x334>
 80016e2:	4b6a      	ldr	r3, [pc, #424]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a69      	ldr	r2, [pc, #420]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b67      	ldr	r3, [pc, #412]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a66      	ldr	r2, [pc, #408]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	e01c      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x356>
 8001704:	4b61      	ldr	r3, [pc, #388]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a60      	ldr	r2, [pc, #384]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4b5e      	ldr	r3, [pc, #376]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a5d      	ldr	r2, [pc, #372]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 800171e:	4b5b      	ldr	r3, [pc, #364]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a5a      	ldr	r2, [pc, #360]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b58      	ldr	r3, [pc, #352]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a57      	ldr	r2, [pc, #348]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d015      	beq.n	800176a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb9d 	bl	8000e7c <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb99 	bl	8000e7c <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0b1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	4b4b      	ldr	r3, [pc, #300]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ee      	beq.n	8001746 <HAL_RCC_OscConfig+0x37e>
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff fb87 	bl	8000e7c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb83 	bl	8000e7c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e09b      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	4b40      	ldr	r3, [pc, #256]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d105      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179a:	4b3c      	ldr	r3, [pc, #240]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a3b      	ldr	r2, [pc, #236]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	4b36      	ldr	r3, [pc, #216]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d061      	beq.n	8001880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d146      	bne.n	8001852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b33      	ldr	r3, [pc, #204]	@ (8001894 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb57 	bl	8000e7c <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fb53 	bl	8000e7c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e06d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	4b29      	ldr	r3, [pc, #164]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017f8:	d108      	bne.n	800180c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4921      	ldr	r1, [pc, #132]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180c:	4b1f      	ldr	r3, [pc, #124]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a19      	ldr	r1, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181c:	430b      	orrs	r3, r1
 800181e:	491b      	ldr	r1, [pc, #108]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	@ (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fb27 	bl	8000e7c <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fb23 	bl	8000e7c <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x46a>
 8001850:	e035      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	@ (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff fb10 	bl	8000e7c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fb0c 	bl	8000e7c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e026      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x498>
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e019      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_RCC_OscConfig+0x500>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4965      	ldr	r1, [pc, #404]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800194a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa5e 	bl	8000e7c <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff fa5a 	bl	8000e7c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4922      	ldr	r1, [pc, #136]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	@ (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	@ (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	@ (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f9bc 	bl	8000df8 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08001bf4 	.word	0x08001bf4
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b087      	sub	sp, #28
 8001aa4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aba:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d002      	beq.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x30>
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d003      	beq.n	8001ad6 <HAL_RCC_GetSysClockFreq+0x36>
 8001ace:	e027      	b.n	8001b20 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ad2:	613b      	str	r3, [r7, #16]
      break;
 8001ad4:	e027      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0c9b      	lsrs	r3, r3, #18
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	4a17      	ldr	r2, [pc, #92]	@ (8001b3c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001ae0:	5cd3      	ldrb	r3, [r2, r3]
 8001ae2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d010      	beq.n	8001b10 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	0c5b      	lsrs	r3, r3, #17
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	4a11      	ldr	r2, [pc, #68]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001afa:	5cd3      	ldrb	r3, [r2, r3]
 8001afc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a0d      	ldr	r2, [pc, #52]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b02:	fb03 f202 	mul.w	r2, r3, r2
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	e004      	b.n	8001b1a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a0c      	ldr	r2, [pc, #48]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	613b      	str	r3, [r7, #16]
      break;
 8001b1e:	e002      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b22:	613b      	str	r3, [r7, #16]
      break;
 8001b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b26:	693b      	ldr	r3, [r7, #16]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	007a1200 	.word	0x007a1200
 8001b3c:	08001c04 	.word	0x08001c04
 8001b40:	08001c14 	.word	0x08001c14
 8001b44:	003d0900 	.word	0x003d0900

08001b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <RCC_Delay+0x34>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <RCC_Delay+0x38>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b64:	bf00      	nop
  }
  while (Delay --);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	60fa      	str	r2, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <RCC_Delay+0x1c>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000008 	.word	0x20000008
 8001b80:	10624dd3 	.word	0x10624dd3

08001b84 <memset>:
 8001b84:	4603      	mov	r3, r0
 8001b86:	4402      	add	r2, r0
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d100      	bne.n	8001b8e <memset+0xa>
 8001b8c:	4770      	bx	lr
 8001b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8001b92:	e7f9      	b.n	8001b88 <memset+0x4>

08001b94 <__libc_init_array>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	2600      	movs	r6, #0
 8001b98:	4d0c      	ldr	r5, [pc, #48]	@ (8001bcc <__libc_init_array+0x38>)
 8001b9a:	4c0d      	ldr	r4, [pc, #52]	@ (8001bd0 <__libc_init_array+0x3c>)
 8001b9c:	1b64      	subs	r4, r4, r5
 8001b9e:	10a4      	asrs	r4, r4, #2
 8001ba0:	42a6      	cmp	r6, r4
 8001ba2:	d109      	bne.n	8001bb8 <__libc_init_array+0x24>
 8001ba4:	f000 f81a 	bl	8001bdc <_init>
 8001ba8:	2600      	movs	r6, #0
 8001baa:	4d0a      	ldr	r5, [pc, #40]	@ (8001bd4 <__libc_init_array+0x40>)
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <__libc_init_array+0x44>)
 8001bae:	1b64      	subs	r4, r4, r5
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	42a6      	cmp	r6, r4
 8001bb4:	d105      	bne.n	8001bc2 <__libc_init_array+0x2e>
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
 8001bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bbc:	4798      	blx	r3
 8001bbe:	3601      	adds	r6, #1
 8001bc0:	e7ee      	b.n	8001ba0 <__libc_init_array+0xc>
 8001bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc6:	4798      	blx	r3
 8001bc8:	3601      	adds	r6, #1
 8001bca:	e7f2      	b.n	8001bb2 <__libc_init_array+0x1e>
 8001bcc:	08001c18 	.word	0x08001c18
 8001bd0:	08001c18 	.word	0x08001c18
 8001bd4:	08001c18 	.word	0x08001c18
 8001bd8:	08001c1c 	.word	0x08001c1c

08001bdc <_init>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

08001be8 <_fini>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr
